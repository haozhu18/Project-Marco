import requests
import time
from geopy.geocoders import Nominatim 

# Getting Hotels and associated information using the TripAdvisor hotels and location API. 500 calls/day , 1 call/second 
# Might be 250/day because we have to call 2/3 APIs

def get_location_id(location):

    '''
    Gets the tripadvisor location_id

    Args:
        location (Str): Name of location whose trip advisor id is needed. 
                        location input is usually a city name, but I'm not sure if we need to do longiude and latitude.

    Returns:
        location_id(int): trip advisor location id of the location.
    '''
    url = "https://tripadvisor1.p.rapidapi.com/locations/search"

    querystring = { 'query':location,
                    'location_id' : '1',
                    'limit' : '1',
                    'sort' : 'relevance',
                    'offset' : '0',
                    'lang' : 'en_US',
    }

    headers = {
        'x-rapidapi-host': "tripadvisor1.p.rapidapi.com",
        'x-rapidapi-key': "21a93f3e0emsh34914a994184bdep12923cjsnc90566e5ca81"
        }

    response = requests.request('GET',url,headers=headers,params = querystring)
    return response.json()['data'][0]['result_object']['location_id']


def get_attractions(location):
    '''
    Given a location (usually a city) return the top 30 recommended attractions as suggested by TripAdvisor's attractions API.

    Args:
        location - City whose attractions are to be found.

    Returns:
        List of dictionaries, each dictionary holding the name of the attraction and various keywords that classify interactions.
    '''

    #TODO: PERFORM ONLY ONE CALL TO THE LOCATION API SO THAT WE DON'T GO OVER THE LIMIT
    location_id = get_location_id(location)
    print(location)
    url = "https://tripadvisor1.p.rapidapi.com/attractions/list"
    querystring = {"lang":"en_US","currency":"USD","sort":"recommended","location_id":location_id}

    headers = {
        'x-rapidapi-host': "tripadvisor1.p.rapidapi.com",
            'x-rapidapi-key': "21a93f3e0emsh34914a994184bdep12923cjsnc90566e5ca81"
        }

    response = requests.request("GET", url, headers=headers, params=querystring)
    
    response_data = response.json()['data']
    name_desc_img = [(attr['name'],attr['description'],attr['photo']['images']['large']['url']) for attr in response_data if 'name' in attr.keys() and 'photo' in attr.keys()]
    subtypes = [[x['subtype'][i]['name'] for i in range(0,len(x['subtype']))] for x in response_data if 'name' in x.keys()]

    return name_desc_img,subtypes
